{"version":3,"sources":["js/Dep.js","js/Watcher.js","js/CompileUtil.js","js/Compile.js","js/Observer.js","js/MVVM.js","js/app.js"],"names":["Dep","subs","watcher","console","log","push","forEach","update","Watcher","vm","exp","callback","value","get","target","CompileUtil","getVal","newValue","oldValue","split","reduce","prev","next","$data","setVal","newVal","currentIndex","length","getTextVal","replace","text","node","updateFn","updater","model","addEventListener","e","textUpdater","textContent","modelUpdater","Compile","el","document","isElementNode","querySelector","fragment","nodeToFragment","compile","appendChild","nodeType","name","includes","createDocumentFragment","firstChild","childNodes","Array","from","compileElement","compileText","attrs","attributes","attr","attrName","isDirective","type","reg","test","Observer","data","observe","Object","keys","key","defineReactive","object","_this","dep","defineProperty","enumerable","configurable","addSub","set","notify","MVVM","options","$el","proxyData","window"],"mappings":"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","file":"app.c3f9f951.map","sourceRoot":"..","sourcesContent":["export default class Dep {\n  constructor () {\n      // 订阅的数组\n      this.subs = [];\n  }\n  addSub (watcher) { // 添加订阅\n      console.log(watcher)\n      this.subs.push(watcher);\n  }\n  notify () { // 通知\n      this.subs.forEach(watcher => watcher.update());\n  }\n}","import CompileUtil from './CompileUtil'\nimport Dep from './Dep'\nexport default class Watcher {\n  constructor(vm, exp, callback) {\n      this.vm = vm;\n      this.exp = exp;\n      this.callback = callback;\n\n      // 更改前的值\n      this.value = this.get();\n  }\n  get() {\n      // 将当前的 watcher 添加到 Dep 类的静态属性上\n      Dep.target = this;\n\n      // 获取值触发数据劫持\n      let value = CompileUtil.getVal(this.vm, this.exp);\n\n      // 清空 Dep 上的 Watcher，防止重复添加\n      Dep.target = null;\n      return value;\n  }\n  update() {\n      // 获取新值\n      let newValue = CompileUtil.getVal(this.vm, this.exp);\n      // 获取旧值\n      let oldValue = this.value;\n\n      // 如果新值和旧值不相等，就执行 callback 对 dom 进行更新\n      if(newValue !== oldValue) {\n          this.callback(newValue);\n      }\n  }\n}","import Watcher from './Watcher'\nvar CompileUtil = {\n  getVal (vm, exp) { // 获取实例上对应的数据\n      exp = exp.split('.');\n      return exp.reduce((prev, next) => {\n          return prev[next];\n      }, vm.$data);\n  },\n  setVal (vm, exp, newVal) { // 设置实例上对应的数据\n      exp = exp.split('.');\n      return exp.reduce((prev, next, currentIndex) => {\n          if(currentIndex === exp.length - 1) {\n              return prev[next] = newVal;\n          }\n          return prev[next];\n      }, vm.$data);\n  },\n  getTextVal (vm, exp) { // 获取编译文本后的结果\n      return exp.replace(/\\{\\{([^}]+)\\}\\}/g, (...arg) => {\n          return this.getVal(vm, arg[1]);\n      });\n  },\n  text (node, vm, exp) { //文本处理\n      let updateFn = this.updater['textUpdater'];\n      let value = this.getTextVal(vm, exp);\n      exp.replace(/\\{\\{([^}]+)\\}\\}/g, (...arg) => {\n          new Watcher(vm, arg[1], newValue => {\n              // 如果数据变化了，文本节点应该重新获取依赖的数据更新文本中的内容\n              updateFn && updateFn(node, newValue);\n          });\n      });\n\n      updateFn && updateFn(node, value);\n  },\n  model (node, vm, exp) { // 输入框处理\n      let updateFn = this.updater['modelUpdater'];\n      let value = this.getVal(vm, exp);\n      // 这里应该加一个监控，数据变化了，应该调用 watch 的回调\n      new Watcher(vm, exp, newValue => {\n          updateFn && updateFn(node, newValue);\n      });\n      // 添加输入框事件实现双向绑定\n      node.addEventListener('input', e => {\n          let newValue = e.target.value;\n          this.setVal(vm, exp, newValue);\n      });\n      // 防止没有的指令解析时报错\n      updateFn && updateFn(node, value);\n  },\n  updater: {\n      // 文本更新\n      textUpdater (node, value) {\n          node.textContent = value;\n      },\n      // 输入框更新\n      modelUpdater (node, value) {\n          node.value = value;\n      }\n  }\n};\n\nexport default CompileUtil","import CompileUtil from './CompileUtil'\nexport default class Compile {\n  constructor (el, vm) {\n      console.log(document,el)\n      this.el = this.isElementNode(el) ? el : document.querySelector(el);\n      this.vm = vm;\n      if(this.el) {\n          // 如果这个元素能获取到，我们才开始编译\n          // 1.先把这些真实的 DOM 移动到内存种 fragment\n          let fragment = this.nodeToFragment(this.el);\n          // 2.编译 => 提取想要的元素节点 v-model 和文本节点 {{message}}\n          this.compile(fragment);\n          // 把编译好的 fragment再塞回到页面中去\n          this.el.appendChild(fragment);\n      }\n  }\n\n  /* 专门写一些辅助方法 */\n  isElementNode (node) { // 是不是 dom 节点\n      return node.nodeType === 1;\n  }\n  isDirective (name) { // 是不是指令\n      return name.includes('v-');\n  }\n\n  /* 核心方法 */\n  nodeToFragment (el) { // 需要将 el 中的内容全部放到内存中\n      // 文档碎片 内存中的 dom 节点\n      let fragment = document.createDocumentFragment();\n      let firstChild;\n      while(firstChild = el.firstChild) {\n          fragment.appendChild(firstChild);\n      }\n      return fragment; // 内存中的节点\n  }\n  compile (fragment) { // 编译文档碎片方法\n      // 需要递归\n      let childNodes = fragment.childNodes;\n      Array.from(childNodes).forEach(node => {\n          if(this.isElementNode(node)) {\n              // 是元素节点，还需要继续深入的检查\n              // console.log('element', node);\n              this.compile(node);\n              // 这里需要编译元素\n              this.compileElement(node);\n          } else {\n              // 是文本节点\n              // console.log('text', node);\n              // 这里需要编译文本\n              this.compileText(node);\n          }\n      });\n  }\n  compileElement (node) { // 编译元素节点\n      // 带 v-model 的\n      let attrs = node.attributes; // 取出当前节点的属性\n      Array.from(attrs).forEach(attr => {\n          // 判断属性名字是不是包含 v-\n          let attrName = attr.name;\n          if(this.isDirective(attrName)) {\n              // 取到对应的值，放在节点中\n              let exp = attr.value;\n              let [, type] = attrName.split('-');\n              // node this.vm.$date exp\n              CompileUtil[type](node, this.vm, exp);\n          }\n      });\n  }\n  compileText (node) { // 编译文本节点\n      // 带 {{}} 的\n      let exp = node.textContent; // 获取文本中的内容\n      let reg = /\\{\\{([^}]+)\\}\\}/g; // {{a}} {{b}} {{c}}\n      if(reg.test(exp)) {\n          // node this.vm.$date exp\n          CompileUtil['text'](node, this.vm, exp);\n      }\n  }\n}\n\n","import Dep from './Dep'\nexport default class Observer {\n  constructor (data) {\n      this.observe(data);\n  }\n  observe (data) {\n      // 验证 data\n      if(!data || typeof data !== 'object') {\n          return;\n      }\n\n      // 要对这个 data 数据将原有的属性改成 set 和 get 的形式\n      // 要将数据一一劫持，先获取到 data 的 key 和 value\n      Object.keys(data).forEach(key => {\n          // 劫持（实现数据响应式）\n          this.defineReactive(data, key, data[key]);\n          this.observe(data[key]); // 深度劫持\n      });\n  }\n  defineReactive (object, key, value) { // 响应式\n      let _this = this;\n      // 每个变化的数据都会对应一个数组，这个数组是存放所有更新的操作\n      let dep = new Dep();\n\n      // 获取某个值被监听到\n      Object.defineProperty(object, key, {\n          enumerable: true,\n          configurable: true,\n          get () { // 当取值时调用的方法\n              console.log(\"target:\",Dep.target)\n              Dep.target && dep.addSub(Dep.target);\n              return value;\n          },\n          set (newValue) { // 当给 data 属性中设置的值适合，更改获取的属性的值\n              if(newValue !== value) {\n                  _this.observe(newValue); // 重新赋值如果是对象进行深度劫持\n                  value = newValue;\n                  dep.notify(); // 通知所有人数据更新了\n              }\n          }\n      });\n  }\n}\n\n","import Compile from './Compile'\nimport Observer from './Observer'\n\nexport default class MVVM {\n  constructor(options) {\n      // 先把 el 和 data 挂在 MVVM 实例上\n      this.$el = options.el;\n      this.$data = options.data;\n\n      // 如果有要编译的模板就开始编译\n      if (this.$el) {\n          // 数据劫持，就是把对象所有的属性添加 get 和 set\n          new Observer(this.$data);\n\n          // 将数据代理到实例上\n          this.proxyData(this.$data);\n\n          // 用数据和元素进行编译\n          new Compile(this.$el, this);\n      }\n  }\n  proxyData(data) { // 代理数据的方法\n      Object.keys(data).forEach(key => {\n          Object.defineProperty(this, key, {\n              get() {\n                  return data[key];\n              },\n              set(newVal) {\n                  data[key] = newVal;\n              }\n          });\n      });\n  }\n}","import MVVM from './MVVM'\n\nwindow.MVVM = MVVM;"]}